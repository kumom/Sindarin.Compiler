/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatesindarin_compiler"]("main",{

/***/ "./src/components/PegPanel.tsx":
/*!*************************************!*\
  !*** ./src/components/PegPanel.tsx ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PegPanel)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _analysis_hypergraph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../analysis/hypergraph */ \"./src/analysis/hypergraph.ts\");\n/* harmony import */ var react_spinners__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-spinners */ \"./node_modules/react-spinners/index.js\");\n/* harmony import */ var react_spinners__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_spinners__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _PegPanel_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PegPanel.scss */ \"./src/components/PegPanel.scss\");\n/* harmony import */ var vis_network_styles_vis_network_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vis-network/styles/vis-network.css */ \"./node_modules/vis-network/styles/vis-network.css\");\n\n\n\n\n\nfunction PegPanel(props) {\n    const sizeThreshold = 600;\n    const viewRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [defPeg, setDefPeg] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [numVertices, setNumVertices] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [rendering, setRendering] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [syntaxPeg, setSyntaxPeg] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [view, setView] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    function clearCanvas() {\n        var _a;\n        if (viewRef.current) {\n            (_a = viewRef.current.querySelector(\"canvas\")) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n    }\n    function showSyntaxPeg() {\n        setRendering(true);\n        if (props.highlighted)\n            setSyntaxPeg(new _analysis_hypergraph__WEBPACK_IMPORTED_MODULE_1__.Hypergraph().fromAst(props.highlighted));\n        else if (props.ast) {\n            setSyntaxPeg(new _analysis_hypergraph__WEBPACK_IMPORTED_MODULE_1__.Hypergraph().fromAst(props.ast));\n        }\n        else {\n            clearCanvas();\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!syntaxPeg)\n            return;\n        clearCanvas();\n        setNumVertices(syntaxPeg.vertices.size);\n        if (viewRef.current && syntaxPeg.vertices.size <= sizeThreshold) {\n            setView(syntaxPeg.toVis().render(viewRef.current, () => {\n                setRendering(false);\n            }));\n        }\n        if (props.language === \"TypeScript\") {\n            setDefPeg(props.seman(syntaxPeg));\n        }\n        // Other languages are not yet supported for semantic analysis\n        else {\n            setDefPeg(null);\n        }\n    }, [syntaxPeg]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (defPeg && props.showDefPeg) {\n            view.overlay(defPeg);\n        }\n        else {\n            showSyntaxPeg();\n        }\n    }, [props.showDefPeg]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        showSyntaxPeg();\n    }, [props.ast, props.highlighted]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (props.ast)\n            setSyntaxPeg(new _analysis_hypergraph__WEBPACK_IMPORTED_MODULE_1__.Hypergraph().fromAst(props.ast));\n    }, []);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"panel\", id: \"peg-panel\" },\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_spinners__WEBPACK_IMPORTED_MODULE_4__.FadeLoader, { loading: rendering }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: {\n                display: numVertices <= sizeThreshold ? \"block\" : \"none\"\n            }, ref: viewRef, id: \"peg-container\" }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: {\n                display: numVertices > sizeThreshold ? \"block\" : \"none\"\n            } }, `Too many vertices: ${numVertices}`)));\n}\n// export default class PegPanel extends React.Component<\n// PegPanelProps,\n// PegPanelState\n// > {\n//   sizeThreshold: number;\n//   ID: any;\n//   viewRef: any;\n//   constructor(props: PegPanelProps) {\n//     super(props);\n//     this.sizeThreshold = 600;\n//     this.ID = HMatcher.Ast.byNodeType(\"Identifier\");\n//     this.viewRef = React.createRef();\n//     this.state = {\n//       defPeg: null,\n//       numVertices: 0,\n//       rendering: false,\n//       syntaxPeg: null,\n//       view: null,\n//     };\n//   }\n//   clearCanvas(): void {\n//     if (this.viewRef.current) {\n//       this.viewRef.current.querySelector(\"canvas\")?.remove();\n//     }\n//   }\n//   init(ast: any): void {\n//     this.setState({ rendering: true });\n//     this.setState({ syntaxPeg: new Hypergraph().fromAst(ast) }, () => {\n//       this.clearCanvas();\n//       const numVertices = this.state.syntaxPeg.vertices.size;\n//       this.setState({ numVertices });\n//       if (this.viewRef.current && numVertices <= this.sizeThreshold) {\n//         const view = this.state.syntaxPeg.toVis().render(this.viewRef.current, () => {\n//           this.setState({ rendering: false });\n//         });\n//         this.setState(\n//           { view },\n//           () => {\n//             if (this.props.language === \"TypeScript\") {\n//               this.setState(\n//                 { defPeg: this.props.seman(this.state.syntaxPeg) },\n//                 () => {\n//                   if (this.props.showDefPeg) {\n//                     this.state.view.overlay(this.state.defPeg);\n//                   }\n//                 }\n//               );\n//             }\n//             // Other languages are not yet supported for semantic analysis\n//             else {\n//               this.setState({ defPeg: null });\n//             }\n//           }\n//         );\n//       }\n//     });\n//   }\n//   shouldComponentUpdate(\n//     nextProps: PegPanelProps,\n//     nextState: PegPanelState\n//   ): boolean {\n//     return (\n//       nextProps.ast !== this.props.ast ||\n//       nextProps.highlighted !== this.props.highlighted ||\n//       nextProps.language !== this.props.language ||\n//       nextProps.showDefPeg !== this.props.showDefPeg ||\n//       nextState.numVertices !== this.state.numVertices ||\n//       nextState.rendering !== this.state.rendering\n//     );\n//   }\n//   componentDidUpdate(prevProps: PegPanelProps, prevState: PegPanelState): void {\n//     if (this.state.rendering !== prevState.rendering) return;\n//     if (this.props.highlighted) this.init(this.props.highlighted);\n//     else if (this.props.ast) {\n//       this.init(this.props.ast);\n//     } else {\n//       this.clearCanvas();\n//     }\n//   }\n//   componentDidMount(): void {\n//     if (this.props.ast) {\n//       this.init(this.props.ast);\n//     }\n//   }\n//   render(): JSX.Element {\n//     return (\n//       <div className=\"panel\" id=\"peg-panel\">\n//         <div\n//           style={{\n//             display:\n//               !this.state.rendering && this.state.numVertices <= this.sizeThreshold ? \"block\" : \"none\"\n//           }}\n//           ref={this.viewRef}\n//           id=\"peg-container\"\n//         />\n//         <div\n//           style={{\n//             display:\n//               this.state.numVertices > this.sizeThreshold ? \"block\" : \"none\"\n//           }}>\n//           {`Too many vertices: ${this.state.numVertices}`}\n//         </div>\n//         <FadeLoader loading={this.state.rendering} />\n//       </div>\n//     );\n//   }\n// }\n\n\n//# sourceURL=webpack://sindarin.compiler/./src/components/PegPanel.tsx?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("9fd7944cea1a8765292d")
/******/ })();
/******/ 
/******/ }
);